#!/usr/bin/env node
// Generated by CoffeeScript 1.10.0
var SimplyImport, args, exitWithHelpMessage, extension, fs, help, input, inputPath, outputIsFile, outputPath, passedOptions, path, regEx, writeResult, yargs;

yargs = require('yargs').usage(require('./cliUsage')).options(require('./cliOptions')).help('h').wrap(require('yargs').terminalWidth()).version(function() {
  return require('../package.json').version;
});

args = yargs.argv;

SimplyImport = require('./simplyimport');

regEx = require('./regex');

path = require('path');

fs = require('fs');

inputPath = args.i || args.input || args._[0];

outputPath = args.o || args.output || args._[1];

help = args.h || args.help;

outputIsFile = regEx.fileExt.test(outputPath);

passedOptions = {
  'uglify': args.u || args.uglify,
  'preserve': args.p || args.preserve,
  'silent': args.s || args.silent,
  'track': args.t || args.track,
  'recursive': args.r || args.recursive,
  'conditions': args.c || args.conditions || [],
  'compileCoffeeChildren': args.C || args['compile-coffee-children']
};

exitWithHelpMessage = function() {
  process.stdout.write(yargs.help());
  return process.exit(0);
};

if (help) {
  exitWithHelpMessage();
}

if (outputPath && !outputIsFile) {
  if (inputPath) {
    extension = path.extname(inputPath);
    if (outputPath.slice(-1)[0] !== '/') {
      outputPath += '/';
    }
    outputPath += path.basename(inputPath, extension) + '.compiled' + extension;
  } else {
    throw 'Output file path (not just a directory path) must be provided if the input is from stdin';
  }
}

writeResult = function(processedContent) {
  if (outputPath) {
    outputPath = path.normalize(outputPath);
    return fs.writeFile(outputPath, processedContent);
  } else {
    return process.stdout.write(processedContent);
  }
};

if (inputPath != null) {
  writeResult(SimplyImport(inputPath, passedOptions));
} else {
  input = '';
  process.stdin.on('data', function(data) {
    return input += data.toString();
  });
  process.stdin.on('end', function() {
    return writeResult(SimplyImport(input, passedOptions, {
      isStream: true
    }));
  });
  setTimeout(function() {
    if (!input) {
      return exitWithHelpMessage();
    }
  }, 250);
}
