// Generated by CoffeeScript 1.10.0
var File, PATH, Promise, SimplyImport, defaultOptions, extend, fs, helpers, regEx, uniq;

require('array-includes').shim();

require('object.entries').shim();

Promise = require('bluebird');

fs = Promise.promisifyAll(require('fs-extra'));

uniq = require('uniq');

PATH = require('path');

extend = require('extend');

regEx = require('./regex');

helpers = require('./helpers');

defaultOptions = require('./defaultOptions');

File = require('./FileConstructor');

RegExp.prototype.test = (function() {
  var origTestFn;
  origTestFn = RegExp.prototype.test;
  return function() {
    var result;
    result = origTestFn.apply(this, arguments);
    this.lastIndex = 0;
    return result;
  };
})();

SimplyImport = function(input, options, state) {
  var fileContent;
  if (state == null) {
    state = {};
  }
  File.instanceCache = {};
  options = extend({}, defaultOptions, options);
  if (!Array.isArray(options.conditions)) {
    options.conditions = [].concat(options.conditions);
  }
  state.isMain = true;
  if (state.context == null) {
    state.context = state.isStream ? process.cwd() : helpers.getNormalizedDirname(input);
  }
  if (state.isStream) {
    fileContent = Promise.resolve(input);
  } else {
    fileContent = fs.readFileAsync(PATH.resolve(input), {
      encoding: 'utf8'
    });
    if (state.isCoffee == null) {
      state.isCoffee = PATH.extname(input).toLowerCase().slice(1) === 'coffee';
    }
  }
  return fileContent.then(function(contents) {
    var subjectFile;
    subjectFile = new File(contents, options, {}, state);
    return subjectFile.process().then(function() {
      return subjectFile.collectImports().then(function() {
        return subjectFile.compile();
      });
    });
  });
};

SimplyImport.scanImports = function(input, opts) {
  var fileContent, importOptions;
  if (opts == null) {
    opts = {};
  }
  File.instanceCache = {};
  importOptions = extend({}, defaultOptions, {
    recursive: false
  });
  opts = extend({}, opts, {
    isMain: true
  });
  if (opts.context == null) {
    opts.context = opts.isStream ? process.cwd() : helpers.getNormalizedDirname(input);
  }
  if (!['/', '\\'].includes(opts.context[0])) {
    opts.context = PATH.resolve(opts.context);
  }
  if (opts.context.slice(-1)[0] === '/') {
    opts.context = opts.context.slice(0, -1);
  }
  if (opts.isStream) {
    fileContent = Promise.resolve(input);
  } else {
    fileContent = fs.readFileAsync(PATH.resolve(input), {
      encoding: 'utf8'
    });
    if (opts.isCoffee == null) {
      opts.isCoffee = PATH.extname(input).toLowerCase().slice(1) === 'coffee';
    }
  }
  return fileContent.then(function(contents) {
    var subjectFile;
    subjectFile = new File(contents, importOptions, {}, opts);
    return subjectFile.process().then(function() {
      return subjectFile.collectImports().then(function() {
        return subjectFile.imports.filter(function(validImport) {
          return validImport;
        }).sort(function(hashA, hashB) {
          return subjectFile.orderRefs.findIndex(function(ref) {
            return ref === hashA;
          }) - subjectFile.orderRefs.findIndex(function(ref) {
            return ref === hashB;
          });
        }).map(function(childHash, childIndex) {
          var childPath, entireLine, importStats;
          childPath = subjectFile.importRefs[childHash].filePath;
          if (!opts.withContext) {
            childPath = childPath.replace(opts.context + '/', '');
          }
          if (opts.pathOnly) {
            return childPath;
          } else {
            importStats = {};
            entireLine = subjectFile.contentLines[subjectFile.lineRefs[childIndex]];
            entireLine.replace(regEx["import"], function(entireLine, priorContent, spacing, conditions) {
              if (priorContent == null) {
                priorContent = '';
              }
              if (spacing == null) {
                spacing = '';
              }
              return importStats = {
                entireLine: entireLine,
                priorContent: priorContent,
                spacing: spacing,
                conditions: conditions,
                path: childPath
              };
            });
            return importStats;
          }
        });
      });
    });
  });
};

SimplyImport.defaults = defaultOptions;

module.exports = SimplyImport;
