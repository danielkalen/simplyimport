// Generated by CoffeeScript 1.10.0
var Promise, acorn, chalk, consoleLabels, dirListingCache, escodegen, fs, helpers, path, regEx, resolveModule;

Promise = require('bluebird');

resolveModule = Promise.promisify(require('resolve'));

fs = Promise.promisifyAll(require('fs-extra'));

path = require('path');

chalk = require('chalk');

acorn = require('acorn');

escodegen = require('escodegen');

regEx = require('./regex');

consoleLabels = require('./consoleLabels');

escodegen.ReturnStatement = function(argument) {
  return {
    type: 'ReturnStatement',
    argument: argument
  };
};

helpers = {
  getNormalizedDirname: function(inputPath) {
    return path.normalize(path.dirname(path.resolve(inputPath)));
  },
  simplifyPath: function(inputPath) {
    return inputPath.replace(process.cwd() + '/', '');
  },
  testForComments: function(line, isCoffee) {
    var hasDocBlockComment, hasSingleLineComment;
    hasSingleLineComment = line.includes(isCoffee ? '#' : '//');
    hasDocBlockComment = /^(?:\s+\*|\*)/.test(line);
    return hasSingleLineComment || hasDocBlockComment;
  },
  testForOuterString: function(line) {
    var i, importSyntax, insideQuotes, len, quote;
    insideQuotes = line.match(regEx.stringContents);
    if (insideQuotes) {
      importSyntax = (function() {
        var word;
        word = regEx["import"].test(line) ? 'import' : 'require';
        return new RegExp("\\b" + word + "\\b");
      })();
      for (i = 0, len = insideQuotes.length; i < len; i++) {
        quote = insideQuotes[i];
        if (importSyntax.test(quote)) {
          return true;
        }
      }
    }
    return false;
  },
  resolveModulePath: function(moduleName, basedir) {
    var moduleLoad;
    moduleLoad = moduleName.startsWith('/') || moduleName.includes('./') ? Promise.resolve() : resolveModule(moduleName, {
      basedir: basedir
    });
    return moduleLoad.then((function(_this) {
      return function(modulePath) {
        return Promise.resolve(modulePath);
      };
    })(this))["catch"]((function(_this) {
      return function(err) {
        return Promise.resolve();
      };
    })(this)).then((function(_this) {
      return function(modulePath) {
        return Promise.resolve(modulePath);
      };
    })(this));
  },
  commentOut: function(line, isCoffee) {
    var comment;
    comment = isCoffee ? '#' : '//';
    return line.replace(/import/, function(entire) {
      return comment + " " + entire;
    });
  },
  getDirListing: function(dirPath, fromCache) {
    if ((dirListingCache[dirPath] != null) && fromCache) {
      return Promise.resolve(dirListingCache[dirPath]);
    } else {
      return fs.readdirAsync(dirPath).then(function(listing) {
        return dirListingCache[dirPath] = listing;
      });
    }
  },
  testConditions: function(allowedConditions, conditionsString) {
    var condition, conditions, i, len;
    if (allowedConditions.length === 1 && allowedConditions[0] === '*') {
      return true;
    }
    conditions = conditionsString.split(/,\s?/).filter(function(nonEmpty) {
      return nonEmpty;
    });
    for (i = 0, len = conditions.length; i < len; i++) {
      condition = conditions[i];
      if (!allowedConditions.includes(condition)) {
        return false;
      }
    }
    return true;
  },
  escapeBackticks: function(content) {
    return content.replace(regEx.preEscapedBackTicks, '`').replace(regEx.backTicks, '\\`');
  },
  formatJsContentForCoffee: function(jsContent) {
    return jsContent.replace(regEx.comment.multiLine, '$1').replace(regEx.escapedNewLine, '').replace(regEx.fileContent, function(entire, spacing, content) {
      return spacing + "`" + (helpers.escapeBackticks(content)) + "`";
    });
  },
  genUniqueVar: function() {
    return "_sim_" + (Math.floor((1 + Math.random()) * 100000).toString(16));
  },
  addSpacingToString: function(string, spacing) {
    return string.split('\n').map(function(line) {
      return spacing + line;
    }).join('\n');
  },
  parseMembersString: function(membersString) {
    var members, output;
    if (!membersString) {
      return {};
    } else {
      output = {};
      membersString = membersString.replace(/^\{\s*/, '').replace(/\s*\}$/, '');
      if (membersString.startsWith('*')) {
        output['!*!'] = membersString.split(/\s+as\s+/)[1];
      } else {
        members = membersString.split(/,\s*/);
        members.forEach(function(memberSignature) {
          var member;
          member = memberSignature.split(/\s+as\s+/);
          return output[member[0]] = member[1] || member[0];
        });
      }
      return output;
    }
  },
  normalizeExportMap: function(mappingString) {
    var output;
    output = mappingString.replace(/^\{\s*/, '').replace(/\s*\}$/, '').split(/,\s*/).map(function(memberSignature) {
      var member;
      member = memberSignature.split(/\s+as\s+/);
      return "'" + (member[1] || member[0]) + "':" + member[0];
    }).join(', ');
    return "{" + output + "}";
  },
  wrapInExportsClosure: function(content, isCoffee) {
    if (isCoffee) {
      return "do (exports={})=>\n" + (this.addSpacingToString('module = {exports}', '\t')) + "\n" + (this.addSpacingToString(content, '\t')) + "\n" + (this.addSpacingToString('return exports', '\t'));
    } else {
      return "(function(exports){\nvar module = {exports:exports};\n" + content + "\nreturn exports;\n}).call(this, {})";
    }
  },
  wrapInClosure: function(content, isCoffee) {
    if (isCoffee) {
      return "do ()=>\n" + (this.addSpacingToString(content, '\t')) + "\n";
    } else {
      return "(function(){" + content + "}).call(this)";
    }
  },
  modToReturnLastStatement: function(content) {
    var AST, MAX_CHARS, OFFSET, error, lastDeclarationID, lastStatement, preview, syntaxErr;
    try {
      AST = acorn.parse(content, {
        allowReserved: true,
        allowReturnOutsideFunction: true
      });
      lastStatement = AST.body[AST.body.length - 1];
      switch (lastStatement.type) {
        case 'ReturnStatement':
          return content;
        case 'ExpressionStatement':
          AST.body[AST.body.length - 1] = escodegen.ReturnStatement(lastStatement.expression);
          return escodegen.generate(AST);
        case 'VariableDeclaration':
          lastDeclarationID = lastStatement.declarations.slice(-1)[0].id;
          AST.body.push(escodegen.ReturnStatement(lastDeclarationID));
          return escodegen.generate(AST);
        default:
          return content;
      }
    } catch (error) {
      syntaxErr = error;
      OFFSET = 20;

      /* istanbul ignore next */
      if (content.length < OFFSET * 2) {
        OFFSET = 0;
      }
      MAX_CHARS = 100;
      preview = syntaxErr.preview = content.substr(syntaxErr.pos - OFFSET, MAX_CHARS);
      preview = preview.substr(0, OFFSET) + chalk.red.bold(preview[OFFSET]) + preview.substr(OFFSET + 1);
      preview = '\n' + chalk.dim(preview);
      console.error(consoleLabels.error, preview, syntaxErr);
      return content;
    }
  }
};

dirListingCache = {};

module.exports = helpers;
