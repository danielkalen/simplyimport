// Generated by CoffeeScript 1.10.0
var dirListingCache, fs, helpers, path, regEx;

fs = require('fs');

path = require('path');

regEx = require('./regex');

helpers = {
  getNormalizedDirname: function(inputPath) {
    return path.normalize(path.dirname(path.resolve(inputPath)));
  },
  simplifyPath: function(inputPath) {
    return inputPath.replace(process.cwd() + '/', '');
  },
  testForComments: function(line, file) {
    var hasDocBlockComment, hasSingleLineComment;
    hasSingleLineComment = file.isCoffee ? line.includes('#') : line.includes('//');
    hasDocBlockComment = line.includes('* ');
    return hasSingleLineComment || hasDocBlockComment;
  },
  commentOut: function(line, file, isImportLine) {
    var comment;
    comment = file.isCoffee ? '#' : '//';
    if (isImportLine) {
      return this.commentBadImportLine(line, comment);
    } else {
      return comment + " " + line;
    }
  },
  commentBadImportLine: function(importLine, comment) {
    return importLine.replace(regEx.importOnly, function(importDec) {
      return comment + " " + importDec;
    });
  },
  getDirListing: function(dirPath) {
    if (dirListingCache[dirPath] != null) {
      return dirListingCache[dirPath];
    } else {
      return dirListingCache[dirPath] = fs.readdirSync(dirPath);
    }
  },
  testConditions: function(allowedConditions, conditionsString) {
    var condition, conditions, i, len;
    conditions = conditionsString.split(/,\s?/).filter(function(nonEmpty) {
      return nonEmpty;
    });
    for (i = 0, len = conditions.length; i < len; i++) {
      condition = conditions[i];
      if (!allowedConditions.includes(condition)) {
        return false;
      }
    }
    return true;
  },
  escapeBackticks: function(content) {
    return content.replace(regEx.preEscapedBackTicks, '`').replace(regEx.backTicks, '\\`');
  },
  formatJsContentForCoffee: function(jsContent) {
    return jsContent.replace(regEx.comment.multiLine, '$1').replace(regEx.escapedNewLine, '').replace(regEx.fileContent, function(entire, spacing, content) {
      return spacing + "`" + (helpers.escapeBackticks(content)) + "`";
    });
  },
  normalizeFilePath: function(inputPath, context) {
    var exactMatch, fileMatch, indexFile, inputFileName, inputPathMatches, parentDir, parentDirListing, pathStats, resolvedPath, targetDirListing;
    inputPath = inputPath.replace(/['"]/g, '').replace(/\s+$/, '');
    resolvedPath = path.normalize(context + '/' + inputPath);
    if (!path.extname(resolvedPath)) {
      inputFileName = path.basename(resolvedPath);
      parentDir = path.dirname(resolvedPath);
      parentDirListing = this.getDirListing(parentDir);
      inputPathMatches = parentDirListing.filter(function(targetPath) {
        return targetPath.includes(inputFileName);
      });
      if (inputPathMatches.length) {
        exactMatch = inputPathMatches.find(function(targetPath) {
          return targetPath === inputFileName;
        });
        fileMatch = inputPathMatches.find(function(targetPath) {
          var fileNameSplit;
          fileNameSplit = targetPath.replace(inputFileName, '').split('.');
          return !fileNameSplit[0] && fileNameSplit.length === 2;
        });
        if (fileMatch) {
          resolvedPath = parentDir + "/" + fileMatch;
        } else {
          resolvedPath = parentDir + "/" + inputFileName;
          pathStats = fs.statSync(resolvedPath);
          if (pathStats.isDirectory()) {
            targetDirListing = this.getDirListing(resolvedPath);
            indexFile = targetDirListing.find(function(file) {
              return file.includes('index');
            });
            if (indexFile) {
              resolvedPath = parentDir + "/" + inputFileName + "/" + indexFile;
            } else {
              resolvedPath = parentDir + "/" + inputFileName + "/index.js";
            }
          }
        }
      }
    }
    return resolvedPath;
  }
};

dirListingCache = {};

module.exports = helpers;
