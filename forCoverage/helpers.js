// Generated by CoffeeScript 1.10.0
var dirListingCache, fs, helpers, path, regEx;

fs = require('fs');

path = require('path');

regEx = require('./regex');

helpers = {
  getNormalizedDirname: function(inputPath) {
    return path.normalize(path.dirname(path.resolve(inputPath)));
  },
  simplifyPath: function(inputPath) {
    return inputPath.replace(process.cwd() + '/', '');
  },
  testForComments: function(line, isCoffee) {
    var hasDocBlockComment, hasSingleLineComment;
    hasSingleLineComment = line.includes(isCoffee ? '#' : '//');
    hasDocBlockComment = line.includes('* ');
    return hasSingleLineComment || hasDocBlockComment;
  },
  commentOut: function(line, isCoffee, isImportLine) {
    var comment;
    comment = isCoffee ? '#' : '//';
    if (isImportLine) {
      return line.replace(regEx.importOnly, function(importDec) {
        return comment + " " + importDec;
      });
    } else {
      return comment + " " + line;
    }
  },
  getDirListing: function(dirPath, fromCache) {
    if ((dirListingCache[dirPath] != null) && fromCache) {
      return Promise.resolve(dirListingCache[dirPath]);
    } else {
      return fs.readdirAsync(dirPath).then(function(listing) {
        return dirListingCache[dirPath] = listing;
      });
    }
  },
  testConditions: function(allowedConditions, conditionsString) {
    var condition, conditions, i, len;
    if (allowedConditions.length === 1 && allowedConditions[0] === '*') {
      return true;
    }
    conditions = conditionsString.split(/,\s?/).filter(function(nonEmpty) {
      return nonEmpty;
    });
    for (i = 0, len = conditions.length; i < len; i++) {
      condition = conditions[i];
      if (!allowedConditions.includes(condition)) {
        return false;
      }
    }
    return true;
  },
  escapeBackticks: function(content) {
    return content.replace(regEx.preEscapedBackTicks, '`').replace(regEx.backTicks, '\\`');
  },
  formatJsContentForCoffee: function(jsContent) {
    return jsContent.replace(regEx.comment.multiLine, '$1').replace(regEx.escapedNewLine, '').replace(regEx.fileContent, function(entire, spacing, content) {
      return spacing + "`" + (helpers.escapeBackticks(content)) + "`";
    });
  },
  genUniqueVar: function() {
    return "_sim_" + (Math.floor((1 + Math.random()) * 100000).toString(16));
  },
  addSpacingToString: function(string, spacing) {
    return string.split('\n').map(function(line) {
      return spacing + line;
    }).join('\n');
  }
};

dirListingCache = {};

module.exports = helpers;
