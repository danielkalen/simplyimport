// Generated by CoffeeScript 1.10.0
(function() {
  var applyReplace, beginImport, checkIfInputExists, defaultOptions, extRegEx, extend, fs, getFileContents, getNormalizedDirname, importHistory, importRegEx, path, uglify;

  applyIncludesPolyfill();

  fs = require('fs');

  path = require('path');

  uglify = require('uglify-js');

  extend = require('object-extend');

  importHistory = [];

  extRegEx = /.+\.(js|coffee)$/i;

  importRegEx = /(\s*)?(?:\/|\#)\s*@import\s*(?:\{(.+)\})?\s*(.+)/ig;

  defaultOptions = {
    inputType: 'stream',
    outputIsFile: false,
    uglify: false,
    recursive: true,
    stdout: false,
    preserve: false,
    conditions: [],
    cwd: process.cwd(),
    coffee: false
  };

  beginImport = function(input, output, passedOptions) {
    var dirContext, fileExt, inputContent, inputIsFromModule, isCoffeeFile, options, replacedContent;
    options = extend(defaultOptions, passedOptions);
    importHistory = [];
    if ((output == null) && !options.stdout) {
      inputIsFromModule = true;
    }
    if (options.inputType === 'stream') {
      inputContent = input;
      dirContext = options.cwd;
      isCoffeeFile = options.coffee;
    } else if (options.inputType === 'path') {
      input = path.normalize(input);
      output = path.normalize(output);
      fileExt = input.match(extRegEx)[1];
      isCoffeeFile = fileExt.toLowerCase() === 'coffee';
      inputContent = getFileContents(input, isCoffeeFile, inputIsFromModule);
      dirContext = getNormalizedDirname(input);
    }
    replacedContent = applyReplace(inputContent, dirContext, isCoffeeFile, options);
    if (options.uglify) {
      replacedContent = uglify.minify(replacedContent, {
        fromString: true
      }).code;
    }
    if (inputIsFromModule) {
      return replacedContent;
    } else {
      if (options.outputIsFile) {
        return fs.writeFileSync(output, replacedContent);
      } else {
        return process.stdout.write(replacedContent);
      }
    }
  };

  applyReplace = function(input, dirContext, isCoffeeFile, options) {
    var output;
    return output = input.replace(importRegEx, function(match, spacing, conditions, filePath) {
      var childDirContext, childIsCoffeeFile, condition, i, importedFileContent, importedHasImports, len, matchedConditions, replacedContent, resolvedPath;
      filePath = filePath.replace(/['"]/g, '');
      resolvedPath = path.normalize(dirContext + '/' + filePath);
      childIsCoffeeFile = (resolvedPath.match(extRegEx) != null) && resolvedPath.match(extRegEx)[1].toLowerCase() === 'coffee';
      importedFileContent = getFileContents(resolvedPath, isCoffeeFile);
      importedHasImports = importRegEx.test(importedFileContent);
      replacedContent = match;
      matchedConditions = true;
      if (conditions) {
        conditions = conditions.split(/,\s?/);
        for (i = 0, len = conditions.length; i < len; i++) {
          condition = conditions[i];
          if (!options.conditions.includes(condition)) {
            matchedConditions = false;
          }
        }
      }
      if (matchedConditions) {
        if (!importedFileContent) {
          return match;
        }
        if (!importHistory.includes(resolvedPath)) {
          importHistory.push(resolvedPath);
          if (importedHasImports) {
            childDirContext = getNormalizedDirname(resolvedPath);
            replacedContent = applyReplace(importedFileContent, childDirContext, childIsCoffeeFile, options);
          } else {
            replacedContent = importedFileContent;
          }
        }
        if (spacing) {
          if (spacing !== '\n') {
            spacing = spacing.replace(/^\n*/, '');
            replacedContent = replacedContent.split('\n').map(function(line) {
              return spacing + line;
            }).join('\n');
          }
          replacedContent = '\n' + replacedContent;
        }
        if (isCoffeeFile && !childIsCoffeeFile) {
          return replacedContent.replace(/^(\s*)((?:.|\n)+)/, function(entire, spacing, content) {
            var escapedContent;
            if (spacing == null) {
              spacing = '';
            }
            escapedContent = content.replace(/`/g, function() {
              return '\\`';
            });
            return spacing + '`' + escapedContent + '`';
          });
        } else if (!isCoffeeFile && childIsCoffeeFile) {
          throw new Error('You\'re trying to import a coffeescript file into a JS file, I don\'t think that\'ll work out well :)');
          return process.exit(1);
        } else {
          return replacedContent;
        }
      } else {
        if (options.preserve) {
          return replacedContent;
        } else {
          return '';
        }
      }
    });
  };

  getFileContents = function(inputPath, isCoffeeFile, inputIsFromModule) {
    var extension, inputPathHasExt;
    if (inputIsFromModule) {
      return inputIsFromModule;
    } else {
      extension = isCoffeeFile ? '.coffee' : '.js';
      inputPathHasExt = extRegEx.test(inputPath);
      if (!inputPathHasExt) {
        inputPath = inputPath + extension;
      }
      if (checkIfInputExists(inputPath)) {
        return fs.readFileSync(inputPath).toString();
      } else {
        return false;
      }
    }
  };

  getNormalizedDirname = function(inputPath) {
    return path.normalize(path.dirname(path.resolve(inputPath)));
  };

  checkIfInputExists = function(inputPath) {
    var error, error1;
    try {
      if (fs.statSync(inputPath).isFile()) {
        return true;
      } else {
        return false;
      }
    } catch (error1) {
      error = error1;
      return false;
    }
  };

  if (!Array.prototype.includes) {
    Array.prototype.includes = function(subject) {
      return this.indexOf(subject) !== -1;
    };
  }

  module.exports = beginImport;

}).call(this);
