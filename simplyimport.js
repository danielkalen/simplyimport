// Generated by CoffeeScript 1.10.0
(function() {
  var CoffeeCompiler, File, Uglifier, fs, helpers, path, processMainFile, regEx, replaceImports;

  if (!Array.prototype.includes) {
    Array.prototype.includes = function(subject) {
      return this.indexOf(subject) !== -1;
    };
  }

  fs = require('fs-extra');

  path = require('path');

  CoffeeCompiler = require('coffee-script');

  Uglifier = require('uglify-js');

  helpers = require('./helpers');

  regEx = require('./regex');

  File = require('./FileConstructor');

  processMainFile = function(input, passedOptions, passedState) {
    var subjectFile;
    subjectFile = new File(input, passedOptions, passedState);
    if (!subjectFile.content) {
      console.error("Import process failed - invalid input " + subjectFile.filePath);
      return process.exit(1);
    } else {
      return replaceImports(subjectFile) || subjectFile.content;
    }
  };

  replaceImports = function(subjectFile) {
    return subjectFile.content.split('\n').map(function(originalLine) {
      return originalLine.replace(regEx["import"], function(originalLine, priorContent, spacing, conditions, childPath) {
        var childContent, childFile, failedReplacement, spacedContent;
        if (spacing == null) {
          spacing = '';
        }
        if (conditions == null) {
          conditions = '';
        }
        failedReplacement = subjectFile.options.preserve ? helpers.commentOut(originalLine, subjectFile) : '';
        if (helpers.testConditions(subjectFile.options.conditions, conditions)) {
          childPath = helpers.normalizeFilePath(childPath, subjectFile.context);
          if (!subjectFile.importHistory[childPath]) {
            subjectFile.importHistory[childPath] = true;
            childFile = new File(childPath, subjectFile.options, {
              'isCoffee': subjectFile.isCoffee
            }, subjectFile.importHistory);
            childContent = childFile.content || '';
            if (childContent) {
              if (subjectFile.options.recursive) {
                childContent = replaceImports(childFile);
              }
              if (spacing && spacing !== '\n' && !priorContent) {
                spacing = spacing.replace(/^\n*/, '');
                spacedContent = childContent.split('\n').map(function(line) {
                  return spacing + line;
                }).join('\n');
                childContent = '\n' + spacedContent;
              }
              switch (false) {
                case !(subjectFile.isCoffee && !childFile.isCoffee):
                  childContent = childContent.replace(/^(\s*)((?:.|\n)+)/, function(entire, spacing, content) {
                    var escapedContent;
                    if (spacing == null) {
                      spacing = '';
                    }
                    escapedContent = content.replace(/`/g, function() {
                      return '\\`';
                    });
                    return spacing + "`" + escapedContent + "`";
                  });
                  break;
                case !(childFile.isCoffee && !subjectFile.isCoffee):
                  if (subjectFile.options.compileCoffeeChildren) {
                    CoffeeCompiler.compile(childFile.content, {
                      'bare': true
                    });
                  } else {
                    throw new Error("You're attempting to import a Coffee file into a JS file (which will provide a broken file), rerun this import with --compile-coffee-children");
                    process.exit(1);
                  }
              }
              if (subjectFile.options.uglify) {
                childContent = Uglifier.minify(childContent, {
                  'fromString': true
                }).code;
              }
            }
          }
        }
        if (priorContent && childContent) {
          childContent = priorContent + spacing + childContent;
        }
        return childContent || failedReplacement;
      });
    }).join('\n');
  };

  module.exports = processMainFile;

}).call(this);
