#!/usr/bin/env node
// Generated by CoffeeScript 1.10.0
(function() {
  var SimplyImport, args, help, input, inputPath, outputIsFile, outputPath, passedOptions, path, regEx, writeResult, yargs;

  yargs = require('yargs').usage("Usage: simplyimport -i <input> -o <output> -[u|s|n|p|c] \nDirective syntax: // @import {<conditions, separated by commas>} <filepath>").options(require('./cliOptions')).help('h').wrap(null).version();

  args = yargs.argv;

  SimplyImport = require('./simplyimport');

  regEx = require('./regex');

  path = require('path');

  inputPath = args.i || args.input || args._[0];

  outputPath = args.o || args.output || args._[1];

  help = args.h || args.help;

  outputIsFile = regEx.fileExt.test(outputPath);

  passedOptions = {
    'uglify': args.u || args.uglify,
    'preserve': args.p || args.preserve,
    'silent': args.s || args.silent,
    'recursive': args.r || args.recursive,
    'conditions': args.c || args.conditions || []
  };

  if (help) {
    process.stdout.write(yargs.help());
    process.exit(0);
  }

  if (outputPath && !outputIsFile) {
    if (inputPath) {
      if (outputPath.slice(-1)[0] !== '/') {
        outputPath += '/';
      }
      outputPath += inputPath.replace(regEx.fileExt, function(entire, endOfPath) {
        return '.compiled.' + endOfPath;
      });
    } else {
      throw 'Output file path (not just a directory path) must be provided if the input is from stdin';
    }
  }

  writeResult = function(processedContent) {
    if (outputPath) {
      outputPath = path.normalize(outputPath);
      return fs.writeFile(outputPath, processedContent);
    } else {
      return process.stdout.write(processedContent);
    }
  };

  if (inputPath != null) {
    writeResult(SimplyImport(inputPath, passedOptions));
  } else {
    input = '';
    process.stdin.on('data', function(data) {
      return input += data.toString();
    });
    process.stdin.on('end', function() {
      return writeResult(SimplyImport(input, passedOptions, {
        isStream: true
      }));
    });
  }

}).call(this);
